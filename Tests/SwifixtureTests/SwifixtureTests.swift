/*
 * Copyright 2024 @ruwatana
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import ArgumentParser
import Foundation
import Testing

@testable import Swifixture

final class SwifixtureTests {
    private let sourceFile = "Sample.swift"
    private let outputFile = "Fixtures.swift"
    
    init() async throws {
        try? FileManager.default.removeItem(at: URL(fileURLWithPath: sourceFile))
        try? FileManager.default.removeItem(at: URL(fileURLWithPath: outputFile))
    }
    
    deinit {
        try? FileManager.default.removeItem(at: URL(fileURLWithPath: sourceFile))
        try? FileManager.default.removeItem(at: URL(fileURLWithPath: outputFile))
    }
    
    @Test func run() async throws {
        let testDataURL = try #require(
            Bundle.module.url(forResource: "Resources/Source", withExtension: "swift")
        )
        let source = try String(contentsOf: testDataURL)
        try source.write(to: URL(fileURLWithPath: sourceFile), atomically: true, encoding: .utf8)

        try Swifixture
            .parse(["--source", sourceFile, "--output", outputFile])
            .run()

        let got = try String(contentsOf: URL(fileURLWithPath: outputFile))
        
        let expectedDataURL = try #require(
            Bundle.module.url(forResource: "Resources/Expected", withExtension: "swift")
        )
        let expected = try String(contentsOf: expectedDataURL)
        
        #expect(got == expected)
    }
    
    @Test func runWithCustomImportsAndTestableImports() async throws {
        try "".write(to: URL(fileURLWithPath: sourceFile), atomically: true, encoding: .utf8)
        
        try Swifixture
            .parse([
                "--source", sourceFile,
                "--output", outputFile,
                "--additional-imports", "Combine", "SwiftUI",
                "--testable-import", "Swifixture"
            ])
            .run()
        
        let got = try String(contentsOf: URL(fileURLWithPath: outputFile))
        
        let expected = """
            ///
            ///  @Generated by Swifixture
            ///

            import Foundation
            import Combine
            import SwiftUI

            @testable import Swifixture



            """
        
        #expect(got == expected)
    }
}
